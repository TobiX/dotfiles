set encoding=utf-8

" save info/swap in XDG cache dir
if !has('win32')
  if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME = $HOME."/.cache"
  endif
  call mkdir($XDG_CACHE_HOME."/vim", 'p', 0700)

  set directory=.,$XDG_CACHE_HOME/vim
  if !has('nvim') " Neovim has its own special location
    set viminfofile=$XDG_CACHE_HOME/vim/viminfo
  endif
endif

let plug_file = split(&rtp, ',')[0] . '/autoload/plug.vim'
let plug_src = 'https://raw.githubusercontent.com/junegunn/vim-plug/904dac1530cfec0880cd44e4f7f206eb2e9e3247/plug.vim'
" vim-plug autoinstall with validation, because I'm paranoid
if empty(glob(plug_file))
  call system('curl -fLo '.plug_file.' '.plug_src)
  if empty(glob(plug_file))
    call system('wget -O '.plug_file.' '.plug_src)
  endif
  if sha256(join(readfile(plug_file, 'b'), "\n")) == 'c2d8998469a049a51225a71128a12917b379822d16b639493e29ea02d8787306'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  else
    call delete(plug_file)
  endif
endif

call plug#begin()
Plug 'airblade/vim-gitgutter', { 'commit': '488c0555e47e2aabe273c635f7dd233e985311a6' }
Plug 'cespare/vim-toml', { 'commit': '1b63257680eeb65677eb1ca5077809a982756d58' }
Plug 'ciaranm/securemodelines', { 'commit': '9751f29699186a47743ff6c06e689f483058d77a' }
Plug 'dense-analysis/ale', { 'commit': '4217461c4859c4fac31ce3d2e22574218f244cf5' }
Plug 'editorconfig/editorconfig-vim', { 'commit': '6a58b7c11f79c0e1d0f20533b3f42f2a11490cf8' }
Plug 'exvim/ex-matchit', { 'commit': 'f0ef9f72a5ef37fd69981a5246fd834039f65b90' }
Plug 'Glench/Vim-Jinja2-Syntax', { 'commit': '2c17843b074b06a835f88587e1023ceff7e2c7d1' }
Plug 'jamessan/vim-gnupg', { 'commit': 'f9b608f29003dfde6450931dc0f495a912973a88' }
Plug 'lifepillar/vim-solarized8', { 'commit': '2f31fc2239c965d7dd9754ba8160582c99211e12' }
Plug 'mMontu/info.vim', { 'commit': 'f7ab6d40a7cd3653f10b1ad7feb7520773a69b4c' }
Plug 'powerman/vim-plugin-AnsiEsc', { 'commit': '690f820d20b6e3a79ba20499874eb7333aa4ca5c' }
Plug 'shumphrey/fugitive-gitlab.vim', { 'commit': '3584cf7e607ba7822f991d407a8d780e05aae287' }
Plug 'tpope/vim-fugitive', { 'commit': '61b51c09b7c9ce04e821f6cf76ea4f6f903e3cf4' }
Plug 'tpope/vim-rhubarb', { 'commit': '5496d7c94581c4c9ad7430357449bb57fc59f501' }
Plug 'vim-scripts/DirDiff.vim', { 'commit': '6c111f8b10c464afa45c6b62820bf3b50828c627' }
Plug 'vim-scripts/LargeFile', { 'commit': '3941a37b2b0288524300348a39521a46539bf9f6' }
call plug#end()

autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

if has("gui_gtk")
	set guifont=Hack\ 10
elseif has("gui_win32")
	set guifont=Consolas
endif

if has("gui_running")
  set lines=35 columns=140
endif

" overwrite default
set nocompatible
set backspace=start,indent,eol
set laststatus=2
set showcmd
set showmatch
set ignorecase
set incsearch
set hlsearch
set magic
set autowrite
set nostartofline
set visualbell
set whichwrap=b,s,h,l,<,>,[,]
set cursorcolumn
set colorcolumn=+2

" I want -w instead of -b
set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-w ' | endif
  if has("gui_win32")
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
      if &sh =~ '\<cmd'
        let cmd = '""' . $VIMRUNTIME . '\diff"'
        let eq = '"'
      else
        let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
      endif
    else
      let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
  else
    silent execute "!diff " . opt . v:fname_in . " " . v:fname_new .
	\  " > " . v:fname_out
  endif
endfunction

" windows and buffers
set hidden
set winheight=5
set statusline=%1*[%n]%*\ %<%f\ %(%2*(%H%M%R%Y)%*%)%=%-10(%3*[%3b,%2B]%*%)\ %-14.(%l,%c%V%)\ %P

" color scheme
set background=dark
let g:solarized_termtrans=1
let g:solarized_extra_hi_groups=1
colorscheme solarized8

hi Normal guibg=black
hi StatusLine   cterm=none ctermfg=white ctermbg=darkblue gui=bold guifg=white guibg=darkblue
hi User1 ctermfg=red    ctermbg=darkblue guifg=red    guibg=darkblue
hi User2 ctermfg=cyan   ctermbg=darkblue guifg=cyan   guibg=darkblue
hi User3 ctermfg=yellow ctermbg=darkblue guifg=yellow guibg=darkblue
hi SpecialKey   ctermfg=3 guifg=#444444

" mouse stuff (I don't want mouse support in console vim)
if !has("gui_running")
  set mouse=
endif
set mousemodel=popup_setpos

" linebreak and list don't work together... :(
"set linebreak
" cool invisible chars
set showbreak=◣
set list listchars=tab:»·,trail:·
" Here to test - here is a very long line to test the showbreak command and my terminals are getting longer and longer... The last things on these lines is a testcase for list and listchars 	      

" Funny things for completion:
set complete=.,w,b,u,t,i,k
set dictionary+=/usr/share/dict/american-english

" key mappings
set pastetoggle=<F8>
map <F8>  :set paste?<CR>
map <silent> <c-l> :silent nohl<CR>

" spell
map <F9>   :setlocal spell spelllang=de_20<CR>
map <S-F9> :setlocal spell spelllang=en_gb<CR>
map <esc><F9> :setlocal nospell<CR>

" tags
map <C-E> <C-]>
set tags+=./tags;

" filetype plugin for Io
au BufNewFile,BufRead *.io			setf io

" restore old behavior
map Q gq

" ===================================================================
" VIM - Editing and updating the vimrc:
nn  ,u :source $MYVIMRC<CR>
nn  ,v :edit   $MYVIMRC<CR>
" ===================================================================

"       ,# = comment current inner paragraph with '#':
nmap ,#   vip:s/^/#/<CR>
"       ,# = comment current text selection  with '#':
vmap ,#      :s/^/#/<CR>
" 001006:  Commenting selected lines in C style:
vmap ,c :s#^#// #<cr>'<O/*<esc>'>o*/<esc>gv

" DirDiff
let g:DirDiffExcludes = ".svn,.*.swp"
let g:DirDiffSort = 0
let g:DirDiffDynamicDiffText = 0

" ALE
let g:ale_virtualtext_prefix = '◆ '

" Options for specific projects
au BufNewFile,BufRead */dosage/*	set expandtab sw=4 sts=4
