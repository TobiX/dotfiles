# SSH magic

# Use 1Password if it is running
op_sock=~/.1password/agent.sock
if [[ ( $SSH_AUTH_SOCK == "" || $SSH_AUTH_SOCK == $XDG_RUNTIME_DIR/ssh-agent.socket ) && -r $op_sock ]]
then
    if [[ $(ss -lxH src $op_sock) != "" ]]
    then
		SSH_AUTH_SOCK=$op_sock
	else
		# Clean up if 1Password isn't running
		rm $op_sock
    fi
fi
unset op_sock

# WSL2 to PuTTY agent or Windows-OpenSSH/1Password
if [[ $SSH_AUTH_SOCK == "" && $WSL_INTEROP != "" && -x =npiperelay.exe ]]
then
	export SSH_AUTH_SOCK="$HOME/.cache/wsl2-ssh-agent"
	if ! ss -a 2>&1 | grep -q "$SSH_AUTH_SOCK"
	then
		rm -f "$SSH_AUTH_SOCK"
		pa_sock="$(powershell.exe 'Write-Host (Get-ChildItem \\.\pipe\ | Where-Object { $_.Name -like "*pageant*" -or $_.Name -like "openssh-*" }).Name')"
		if [[ $pa_sock != "" ]]
		then
			(setsid nohup socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei //./pipe/$pa_sock",nofork >/dev/null 2>&1 &)
		fi
		unset pa_sock
	fi
fi

# WSL/CygWin
if [[ $SSH_AUTH_SOCK == "" ]]
then
	# Try locations for
	# - https://github.com/benpye/wsl-ssh-pageant
	# - CygWin-KeyAgent integration
	for sock in /mnt/c/Tools/ssh-agent.sock /home/keeagent.sock
	do
		if [[ -e $sock ]]
		then
			export SSH_AUTH_SOCK="$sock"
			break
		fi
	done
fi

# Only use "latest" link if we couldn't find another usable agent
if [[ $SSH_AUTH_SOCK == "" && -e $sshlink ]]
then
	export SSH_AUTH_SOCK="$sshlink"
fi

unset sshlink

true
# vi: set ft=zsh ts=4 sw=4:
